import os
import time
import re
import requests
import pytz
from datetime import datetime, timedelta


class TelemostClient:
    """
    –ö–ª–∏–µ–Ω—Ç –∫ –Ø–Ω–¥–µ–∫—Å –¢–µ–ª–µ–º–æ—Å—Ç API.
    –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ = —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã (–±–µ–∑ —Ç–µ–º—ã/–¥–∞—Ç—ã –≤ —Å–∞–º–æ–º API).
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:
      - –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ: YANDEX_OAUTH_TOKEN = y0_...
      - –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: YANDEX_CLIENT_ID / YANDEX_CLIENT_SECRET (client_credentials)
    """

    API_BASE = "https://cloud-api.yandex.net/v1/telemost-api"
    TOKEN_URL = "https://oauth.yandex.ru/token"

    def __init__(self, tz: str = "Europe/Moscow"):
        self.tz = tz

        # 1) —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π OAuth-—Ç–æ–∫–µ–Ω (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)
        self._static_token = os.getenv("YANDEX_OAUTH_TOKEN")

        # 2) client_credentials (–∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
        self.client_id = os.getenv("YANDEX_CLIENT_ID")
        self.client_secret = os.getenv("YANDEX_CLIENT_SECRET")

        if not self._static_token and not (self.client_id and self.client_secret):
            raise ValueError(
                "–ù—É–∂–µ–Ω YANDEX_OAUTH_TOKEN –ò–õ–ò –ø–∞—Ä–∞ YANDEX_CLIENT_ID/SECRET "
                "(–¥–ª—è –ø–æ—Ç–æ–∫–∞ client_credentials)."
            )

        self._access_token = None
        self._exp_ts = 0  # unix-–≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞

    # ---------- —Ç–æ–∫–µ–Ω ----------
    def _get_access_token(self) -> str:
        # –µ—Å–ª–∏ –∑–∞–¥–∞–Ω —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–∫–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if self._static_token:
            return self._static_token

        # –µ—Å–ª–∏ —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –∏ –µ—â—ë –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω ‚Äî –≤–µ—Ä–Ω—ë–º –∫—ç—à
        if self._access_token and time.time() < self._exp_ts - 60:
            return self._access_token

        # –∏–Ω–∞—á–µ –±–µ—Ä—ë–º –Ω–æ–≤—ã–π –ø–æ client_credentials
        r = requests.post(
            self.TOKEN_URL,
            data={
                "grant_type": "client_credentials",
                "client_id": self.client_id,
                "client_secret": self.client_secret,
            },
            timeout=20,
        )
        try:
            r.raise_for_status()
        except requests.HTTPError as e:
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å OAuth-—Ç–æ–∫–µ–Ω: HTTP {r.status_code} {r.text}") from e

        data = r.json()
        self._access_token = data["access_token"]
        self._exp_ts = time.time() + int(data.get("expires_in", 3600))
        return self._access_token

    def _headers(self):
        # –î–ª—è Telemost –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Authorization: OAuth <token>
        return {
            "Authorization": f"OAuth {self._get_access_token()}",
            "Content-Type": "application/json",
        }

    # ---------- API ----------
    def create_meeting(self, *_, waiting_room_level: str = "PUBLIC") -> dict:
        """
        –°–æ–∑–¥–∞—ë—Ç –∫–æ–º–Ω–∞—Ç—É –¢–µ–ª–µ–º–æ—Å—Ç–∞.
        –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã *_, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∫–∞–∫ (topic, when_dt, duration_min),
        –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è ‚Äî –≤ Telemost —ç—Ç–∏—Ö –ø–æ–ª–µ–π –Ω–µ—Ç.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON, –≥–¥–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º: {"id": "...", "join_url": "..."}.
        """
        payload = {"waiting_room_level": waiting_room_level}
        r = requests.post(
            f"{self.API_BASE}/conferences",
            headers=self._headers(),
            json=payload,
            timeout=30,
        )
        try:
            r.raise_for_status()
        except requests.HTTPError as e:
            raise RuntimeError(f"Telemost create: HTTP {r.status_code}: {r.text}") from e
        return r.json()

    def get_meeting(self, conf_id: str) -> dict:
        r = requests.get(
            f"{self.API_BASE}/conferences/{conf_id}",
            headers=self._headers(),
            timeout=20,
        )
        try:
            r.raise_for_status()
        except requests.HTTPError as e:
            raise RuntimeError(f"Telemost get: HTTP {r.status_code}: {r.text}") from e
        return r.json()

    def delete_meeting(self, conf_id: str) -> bool:
        r = requests.delete(
            f"{self.API_BASE}/conferences/{conf_id}",
            headers=self._headers(),
            timeout=20,
        )
        if r.status_code not in (200, 204):
            raise RuntimeError(f"Telemost delete: HTTP {r.status_code}: {r.text}")
        return True

    # –ü—É–±–ª–∏—á–Ω–æ–π —Ä—É—á–∫–∏ "—Å–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á" —É Telemost –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
    def list_meetings(self) -> list[dict]:
        return []


# ---------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ----------------

def _extract_topic(text: str) -> str | None:
    """–¢–µ–º—É –¥–æ—Å—Ç–∞—ë–º –∏–∑ –∫–∞–≤—ã—á–µ–∫ –∏–ª–∏ –ø–æ—Å–ª–µ —Å–ª–æ–≤ '—Ç–µ–º–∞/–Ω–∞ —Ç–µ–º—É/–æ —Ç–µ–º–µ'."""
    m = re.search(r"[¬´\"']([^\"'¬ª]{3,120})[\"'¬ª]", text or "")
    if m:
        return m.group(1).strip()
    m = re.search(r"(?:—Ç–µ–º–∞|–Ω–∞ —Ç–µ–º—É|–æ —Ç–µ–º–µ)\s*[:\-]?\s*(.+)$", text or "", flags=re.IGNORECASE)
    if m:
        return m.group(1).strip()
    return None


# ---------------- –ò–ù–¢–ï–ù–¢–´ ----------------

def handle_telemost_intents(tm: TelemostClient, text: str) -> str | None:
    """
    –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –∏–Ω—Ç–µ–Ω—Ç—ã –¥–ª—è –¢–µ–ª–µ–º–æ—Å—Ç–∞.
    –¢—Ä–∏–≥–≥–µ—Ä ‚Äî –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ '—Ç–µ–ª–µ–º–æ—Å—Ç' –≤ –∑–∞–ø—Ä–æ—Å–µ.
    """
    original = text or ""
    t = original.lower().strip()

    # —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —É–ø–æ–º—è–Ω—É–ª–∏ —Ç–µ–ª–µ–º–æ—Å—Ç
    if not re.search(r"\b—Ç–µ–ª–µ–º–æ—Å—Ç\w*\b", t):
        return None

    # –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ ‚Äî –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–µ—Ç
    if re.search(r"\b(—Å–ø–∏—Å–æ–∫|–º–æ–∏|–ø–æ–∫–∞–∂–∏)\s+–≤—Å—Ç—Ä–µ—á", t):
        return "üóìÔ∏è –í –ø—É–±–ª–∏—á–Ω–æ–º API –¢–µ–ª–µ–º–æ—Å—Ç–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏.\n" \
               "–Ø –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É ID."

    # —É–¥–∞–ª–∏—Ç—å –≤—Å–µ ‚Äî –Ω–µ –º–æ–≥—É –±–µ–∑ —Å–ø–∏—Å–∫–∞
    if re.search(r"(–æ—Ç–º–µ–Ω–∏|—É–¥–∞–ª–∏)\s+–≤—Å–µ\s+–≤—Å—Ç—Ä–µ—á", t):
        return "üóëÔ∏è –ù–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å –≤—Å–µ: –≤ –ø—É–±–ª–∏—á–Ω–æ–º API –Ω–µ—Ç —Å–ø–∏—Å–∫–∞ –≤—Å—Ç—Ä–µ—á. " \
               "–ù–∞–∑–æ–≤–∏ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—Ç–µ–ª–µ–º–æ—Å—Ç —É–¥–∞–ª–∏ –≤—Å—Ç—Ä–µ—á—É abc123¬ª."

    # —É–¥–∞–ª–∏—Ç—å –ø–æ ID
    m = re.search(r"(–æ—Ç–º–µ–Ω–∏|—É–¥–∞–ª–∏)\s+–≤—Å—Ç—Ä–µ—á[–∞—É—ã–µ]?\s+([a-z0-9\-]{6,})", t)
    if m:
        cid = m.group(2)
        tm.delete_meeting(cid)
        return f"üóëÔ∏è –í—Å—Ç—Ä–µ—á–∞ –¢–µ–ª–µ–º–æ—Å—Ç–∞ **{cid}** –æ—Ç–º–µ–Ω–µ–Ω–∞."

    # —Å–æ–∑–¥–∞—Ç—å
    if re.search(r"\b(—Å–æ–∑–¥–∞–π|—Å–æ–∑–¥–∞—Ç—å|—Å–¥–µ–ª–∞–π|–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π)\b.*\b–≤—Å—Ç—Ä–µ—á", t):
        # —Ç–µ–º–∞/–≤—Ä–µ–º—è —Ç—É—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è API, –Ω–æ –º–æ–∂–µ–º –∫—Ä–∞—Å–∏–≤–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        topic = _extract_topic(original) or "–í—Å—Ç—Ä–µ—á–∞"
        data = tm.create_meeting()  # —Å–æ–∑–¥–∞—ë–º –∫–æ–º–Ω–∞—Ç—É
        link = data.get("join_url") or (data.get("links") or {}).get("join") or "‚Äî"
        return (
            f"‚úÖ –°–æ–∑–¥–∞–ª –≤—Å—Ç—Ä–µ—á—É –≤ –¢–µ–ª–µ–º–æ—Å—Ç–µ: ¬´{topic}¬ª.\n"
            f"–°—Å—ã–ª–∫–∞: {link}\nID: {data.get('id')}"
        )

    # –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    return None
