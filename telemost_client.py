# telemost_client.py
import os
import re
from datetime import datetime, timedelta
import pytz
import requests

class TelemostClient:
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –Ø–Ω–¥–µ–∫—Å –¢–µ–ª–µ–º–æ—Å—Ç –ø–æ OAuth.
    –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: YANDEX_OAUTH_TOKEN.
    """
    API_BASE = "https://api.telemost.yandex.net"   # TODO: –ø—Ä–æ–≤–µ—Ä—å –≤ –¥–æ–∫–µ —Ç–æ—á–Ω—ã–π —Ö–æ—Å—Ç/–ø—Ä–µ—Ñ–∏–∫—Å

    def __init__(self, tz: str = "Europe/Moscow"):
        token = os.getenv("YANDEX_OAUTH_TOKEN")
        if not token:
            raise ValueError("YANDEX_OAUTH_TOKEN not set")
        self.tz = tz
        self._token = token

    def _headers(self):
        return {
            "Authorization": f"OAuth {self._token}",
            "Content-Type": "application/json",
        }

    def create_meeting(self, title: str, when_dt: datetime, duration_min: int = 60) -> dict:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏.
        TODO: –ø–æ–¥—Å—Ç–∞–≤—å —Ç–æ—á–Ω—ã–π –ø—É—Ç—å –∏ –ø–æ–ª—è –∏–∑ –æ—Ñ. —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¢–µ–ª–µ–º–æ—Å—Ç–∞.
        """
        # –ø—Ä–∏–º–µ—Ä: –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è -> ISO —Å —Ç–∞–π–º–∑–æ–Ω–æ–π
        tz = pytz.timezone(self.tz)
        local = tz.localize(when_dt) if when_dt.tzinfo is None else when_dt.astimezone(tz)
        start_iso = local.isoformat()

        payload = {
            "title": title or "–í—Å—Ç—Ä–µ—á–∞",
            "start_time": start_iso,         # TODO: —É—Ç–æ—á–Ω–∏ –∏–º—è –ø–æ–ª—è
            "duration": duration_min,        # TODO: —É—Ç–æ—á–Ω–∏ –∏–º—è –ø–æ–ª—è
            # "settings": {...}               # –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        }

        # –ø—Ä–∏–º–µ—Ä —ç–Ω–¥–ø–æ–π–Ω—Ç–∞:
        url = f"{self.API_BASE}/v2/conferences"  # TODO: —É—Ç–æ—á–Ω–∏ —Ç–æ—á–Ω—ã–π –ø—É—Ç—å
        r = requests.post(url, headers=self._headers(), json=payload, timeout=20)
        if not r.ok:
            raise requests.HTTPError(f"{r.status_code} {r.text}")
        return r.json()

    def list_meetings(self) -> list[dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –≤—Å—Ç—Ä–µ—á.
        TODO: –ø–æ–¥—Å—Ç–∞–≤—å –≤–µ—Ä–Ω—ã–π —ç–Ω–¥–ø–æ–π–Ω—Ç/–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –¥–æ–∫–∏.
        """
        url = f"{self.API_BASE}/v2/conferences"  # TODO
        r = requests.get(url, headers=self._headers(), timeout=20)
        if not r.ok:
            raise requests.HTTPError(f"{r.status_code} {r.text}")
        data = r.json()
        # –≤–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫; –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        return data.get("items") or data.get("conferences") or []

    def delete_meeting(self, meeting_id: str) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ ID.
        """
        url = f"{self.API_BASE}/v2/conferences/{meeting_id}"  # TODO
        r = requests.delete(url, headers=self._headers(), timeout=20)
        if r.status_code not in (200, 204):
            raise requests.HTTPError(f"{r.status_code} {r.text}")
        return True


# ===== —É—Ç–∏–ª–∏—Ç—ã/–∏–Ω—Ç–µ–Ω—Ç—ã (–ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –≤ zoom_client) =====

_MONTHS_RU = {
    "—è–Ω–≤–∞—Ä": 1, "—Ñ–µ–≤—Ä–∞–ª": 2, "–º–∞—Ä—Ç": 3, "–∞–ø—Ä–µ–ª": 4, "–º–∞": 5,
    "–∏—é–Ω": 6, "–∏—é–ª": 7, "–∞–≤–≥—É—Å—Ç": 8, "—Å–µ–Ω—Ç—è–±—Ä": 9, "–æ–∫—Ç—è–±—Ä": 10, "–Ω–æ—è–±—Ä": 11, "–¥–µ–∫–∞–±—Ä": 12
}
_SPACE_CLASS = r"[\s\u00A0\u202F\u2009]"

def _extract_time(text: str):
    s = (text or "").lower().replace("\u202f"," ").replace("\u00a0"," ").replace("\u2009"," ")
    m = re.search(rf"\b(\d{{1,2}})[:\-\.{_SPACE_CLASS}](\d{{2}})\b(?!\.)", s)
    if m:
        h, mm = int(m.group(1)), int(m.group(2))
        if 0 <= h <= 23 and 0 <= mm <= 59:
            return h, mm
    m = re.search(r"\b(\d{1,2})\s*—á\b", s)
    if m:
        h = int(m.group(1))
        if 0 <= h <= 23:
            return h, 0
    m = re.search(r"\b–≤\s+(\d{1,2})(?!\d)", s)
    if m:
        h = int(m.group(1))
        if 0 <= h <= 23:
            return h, 0
    return None

def _parse_explicit_date(text: str, now: datetime):
    t = (text or "").lower()
    m = re.search(r"\b(\d{1,2})\.(\d{1,2})(?:\.(\d{4}))?\b", t)
    if m:
        d, mo, y = int(m.group(1)), int(m.group(2)), int(m.group(3) or now.year)
        return now.replace(year=y, month=mo, day=d, hour=0, minute=0, second=0, microsecond=0)
    m = re.search(r"\b(\d{1,2})\s+([–∞-—è—ë]+)(?:\s+(\d{4}))?\b", t)
    if m:
        d, mon_word, y = int(m.group(1)), m.group(2), int(m.group(3) or now.year)
        mon = None
        for stem, num in _MONTHS_RU.items():
            if mon_word.startswith(stem):
                mon = num; break
        if mon:
            return now.replace(year=y, month=mon, day=d, hour=0, minute=0, second=0, microsecond=0)
    if "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in t: return now + timedelta(days=2)
    if "–∑–∞–≤—Ç—Ä–∞" in t:       return now + timedelta(days=1)
    if "—Å–µ–≥–æ–¥–Ω—è" in t:     return now
    return None

def _parse_when(text: str, tz_name: str) -> datetime | None:
    import pytz
    tz = pytz.timezone(tz_name)
    now = datetime.now(tz)
    day = _parse_explicit_date(text, now)
    tm  = _extract_time(text)
    if day and tm: return day.replace(hour=tm[0], minute=tm[1], second=0, microsecond=0)
    if day and not tm: return day.replace(hour=10, minute=0, second=0, microsecond=0)
    if not day and tm:
        dt = now.replace(hour=tm[0], minute=tm[1], second=0, microsecond=0)
        if dt <= now: dt = dt + timedelta(days=1)
        return dt
    return None

def _fmt(items: list[dict], tz_name: str) -> str:
    if not items:
        return "üóìÔ∏è –í—Å—Ç—Ä–µ—á –Ω–µ—Ç."
    tz = pytz.timezone(tz_name)
    out = ["üóìÔ∏è –ë–ª–∏–∂–∞–π—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏:"]
    for i, m in enumerate(items, 1):
        # –ø–æ–¥—Å—Ç—Ä–æ–π –ø–æ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è API
        start = m.get("start_time") or m.get("start") or m.get("when")
        topic = m.get("title") or m.get("topic") or "–ë–µ–∑ —Ç–µ–º—ã"
        mid   = m.get("id") or m.get("meeting_id")
        when = "‚Äî"
        if start:
            try:
                dt = datetime.fromisoformat(str(start).replace("Z","+00:00")).astimezone(tz)
                when = dt.strftime("%d.%m.%Y %H:%M")
            except Exception:
                when = str(start)
        out.append(f"{i}. {topic} ‚Ä¢ ID: {mid} ‚Ä¢ {when}")
    return "\n".join(out)

def handle_telemost_intents(tm: TelemostClient, text: str) -> str | None:
    t = (text or "").lower().strip()

    if re.search(r"\b(—Å–ø–∏—Å–æ–∫|–º–æ–∏|–ø–æ–∫–∞–∂–∏)\s+–≤—Å—Ç—Ä–µ—á", t):
        items = tm.list_meetings()
        return _fmt(items, tm.tz)

    m = re.search(r"(–æ—Ç–º–µ–Ω–∏|—É–¥–∞–ª–∏)\s+–≤—Å—Ç—Ä–µ—á[–∞—É—ã–µ]?\s+(\d+)", t)
    if m:
        mid = m.group(2)
        tm.delete_meeting(mid)
        return f"üóëÔ∏è –í—Å—Ç—Ä–µ—á–∞ **{mid}** –æ—Ç–º–µ–Ω–µ–Ω–∞ (–¢–µ–ª–µ–º–æ—Å—Ç)."

    if re.search(r"\b(—Å–æ–∑–¥–∞–π|—Å–æ–∑–¥–∞—Ç—å|—Å–¥–µ–ª–∞–π|–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π)\b.*\b–≤—Å—Ç—Ä–µ—á[–∞—É—ã–µ]?\b", t) or (("–≤ —Ç–µ–ª–µ–º–æ—Å—Ç" in t) and "–≤—Å—Ç—Ä–µ—á" in t):
        when = _parse_when(text, tm.tz)
        title = "–í—Å—Ç—Ä–µ—á–∞"
        if not when:
            return "–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É/–≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: ¬´—Å–æ–∑–¥–∞–π –≤—Å—Ç—Ä–µ—á—É –≤ —Ç–µ–ª–µ–º–æ—Å—Ç–µ —Å–µ–≥–æ–¥–Ω—è –≤ 15 45¬ª."
        data = tm.create_meeting(title, when, 60)
        join = data.get("join_url") or data.get("link") or data.get("url") or "‚Äî"
        mid  = data.get("id") or data.get("meeting_id") or "‚Äî"
        when_str = when.strftime("%d.%m.%Y %H:%M")
        # –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π
        return f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ ¬´{title}¬ª –Ω–∞ {when_str}.<br>üîó <a href=\"{join}\" target=\"_blank\" rel=\"noopener\">–ü–µ—Ä–µ–π—Ç–∏ –≤ –¢–µ–ª–µ–º–æ—Å—Ç</a><br>ID: {mid}"
    return None
