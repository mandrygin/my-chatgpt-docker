# telemost_client.py
import os
import re
from datetime import datetime, timedelta
import pytz
import requests
from typing import Optional, Tuple, List, Dict


class TelemostClient:
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –Ø–Ω–¥–µ–∫—Å.–¢–µ–ª–µ–º–æ—Å—Ç –ø–æ OAuth.
    –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: YANDEX_OAUTH_TOKEN (–∑–Ω–∞—á–µ–Ω–∏–µ access_token).
    """
    API_BASE = "https://cloud-api.yandex.net/v1/telemost-api"

    def __init__(self, tz: str = "Europe/Moscow"):
        token = os.getenv("YANDEX_OAUTH_TOKEN")
        if not token:
            raise ValueError("YANDEX_OAUTH_TOKEN not set")
        self.tz = tz
        self._token = token

    def _headers(self) -> Dict[str, str]:
        return {
            "Authorization": f"OAuth {self._token}",
            "Content-Type": "application/json",
            "Accept": "application/json",
        }

    def create_meeting(self, title: str, when_dt: datetime, duration_min: int = 60) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É –¢–µ–ª–µ–º–æ—Å—Ç–∞ (–≤ API –Ω–µ—Ç –ø–æ–ª–µ–π start_time/duration).
        –ú—ã —Ö—Ä–∞–Ω–∏–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
        """
        payload = {
            # PUBLIC / ORGANIZATION / ADMINS ‚Äî –∫–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –±–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            "waiting_room_level": "PUBLIC"
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å cohosts/live_stream –∏ —Ç.–¥., –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }
        url = f"{self.API_BASE}/conferences"
        r = requests.post(url, headers=self._headers(), json=payload, timeout=20)
        if not r.ok:
            raise requests.HTTPError(f"{r.status_code} {r.text}")
        data = r.json()

        # –î–æ–±–∞–≤–∏–º ¬´–∫–æ—Å–º–µ—Ç–∏–∫—É¬ª, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –±—ã–ª–æ —É–¥–æ–±–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
        data.setdefault("title", title or "–í—Å—Ç—Ä–µ—á–∞")
        data.setdefault("when_local", when_dt.astimezone(pytz.timezone(self.tz)).isoformat())
        return data

    def list_meetings(self) -> List[Dict]:
        """–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π (–∫–æ–º–Ω–∞—Ç)."""
        url = f"{self.API_BASE}/conferences"
        r = requests.get(url, headers=self._headers(), timeout=20)
        if not r.ok:
            raise requests.HTTPError(f"{r.status_code} {r.text}")
        data = r.json()
        return data.get("conferences") or data.get("items") or data or []

    def delete_meeting(self, meeting_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ ID."""
        url = f"{self.API_BASE}/conferences/{meeting_id}"
        r = requests.delete(url, headers=self._headers(), timeout=20)
        if r.status_code not in (200, 204):
            raise requests.HTTPError(f"{r.status_code} {r.text}")
        return True


# ===== –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π, –∫–∞–∫ –≤ zoom_client) =====

_MONTHS_RU = {
    "—è–Ω–≤–∞—Ä": 1, "—Ñ–µ–≤—Ä–∞–ª": 2, "–º–∞—Ä—Ç": 3, "–∞–ø—Ä–µ–ª": 4, "–º–∞": 5,
    "–∏—é–Ω": 6, "–∏—é–ª": 7, "–∞–≤–≥—É—Å—Ç": 8, "—Å–µ–Ω—Ç—è–±—Ä": 9, "–æ–∫—Ç—è–±—Ä": 10, "–Ω–æ—è–±—Ä": 11, "–¥–µ–∫–∞–±—Ä": 12
}
_SPACE_CLASS = r"[\s\u00A0\u202F\u2009]"

def _extract_time(text: str) -> Optional[Tuple[int, int]]:
    s = (text or "").lower().replace("\u202f", " ").replace("\u00a0", " ").replace("\u2009", " ")
    m = re.search(rf"\b(\d{{1,2}})[:\-\.{_SPACE_CLASS}](\d{{2}})\b(?!\.)", s)
    if m:
        h, mm = int(m.group(1)), int(m.group(2))
        if 0 <= h <= 23 and 0 <= mm <= 59:
            return h, mm
    m = re.search(r"\b(\d{1,2})\s*—á\b", s)
    if m:
        h = int(m.group(1))
        if 0 <= h <= 23:
            return h, 0
    m = re.search(r"\b–≤\s+(\d{1,2})(?!\d)", s)
    if m:
        h = int(m.group(1))
        if 0 <= h <= 23:
            return h, 0
    return None

def _parse_explicit_date(text: str, now: datetime) -> Optional[datetime]:
    t = (text or "").lower()
    m = re.search(r"\b(\d{1,2})\.(\d{1,2})(?:\.(\d{4}))?\b", t)
    if m:
        d, mo, y = int(m.group(1)), int(m.group(2)), int(m.group(3) or now.year)
        return now.replace(year=y, month=mo, day=d, hour=0, minute=0, second=0, microsecond=0)
    m = re.search(r"\b(\d{1,2})\s+([–∞-—è—ë]+)(?:\s+(\d{4}))?\b", t)
    if m:
        d, mon_word, y = int(m.group(1)), m.group(2), int(m.group(3) or now.year)
        mon = None
        for stem, num in _MONTHS_RU.items():
            if mon_word.startswith(stem):
                mon = num; break
        if mon:
            return now.replace(year=y, month=mon, day=d, hour=0, minute=0, second=0, microsecond=0)
    if "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in t: return now + timedelta(days=2)
    if "–∑–∞–≤—Ç—Ä–∞" in t:      return now + timedelta(days=1)
    if "—Å–µ–≥–æ–¥–Ω—è" in t:     return now
    return None

def _parse_when(text: str, tz_name: str) -> Optional[datetime]:
    tz = pytz.timezone(tz_name)
    now = datetime.now(tz)
    day = _parse_explicit_date(text, now)
    tm  = _extract_time(text)
    if day and tm: return day.replace(hour=tm[0], minute=tm[1], second=0, microsecond=0)
    if day and not tm: return day.replace(hour=10, minute=0, second=0, microsecond=0)
    if not day and tm:
        dt = now.replace(hour=tm[0], minute=tm[1], second=0, microsecond=0)
        if dt <= now: dt = dt + timedelta(days=1)
        return dt
    return None

def _fmt(items: List[Dict], tz_name: str) -> str:
    if not items:
        return "üóìÔ∏è –í—Å—Ç—Ä–µ—á –Ω–µ—Ç."
    tz = pytz.timezone(tz_name)
    out = ["üóìÔ∏è –ö–æ–º–Ω–∞—Ç—ã –¢–µ–ª–µ–º–æ—Å—Ç–∞:"]
    for i, m in enumerate(items, 1):
        # –¢–µ–ª–µ–º–æ—Å—Ç –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ ‚Äî –ø–æ–∫–∞–∂–µ–º —Ç–æ, —á—Ç–æ –µ—Å—Ç—å
        # (–µ—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç API –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–ª–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º ‚Äî –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º)
        topic = m.get("title") or m.get("topic") or "–ë–µ–∑ —Ç–µ–º—ã"
        mid   = m.get("id") or m.get("meeting_id") or "‚Äî"
        join  = m.get("join_url") or m.get("link") or m.get("url") or ""
        out.append(f"{i}. {topic} ‚Ä¢ ID: {mid} ‚Ä¢ {join}")
    return "\n".join(out)


# ===== –ò–Ω—Ç–µ–Ω—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (—Å—Ç—Ä–æ–≥–æ –ø–æ —Å–ª–æ–≤—É ¬´—Ç–µ–ª–µ–º–æ—Å—Ç¬ª) =====

def handle_telemost_intents(tm: TelemostClient, text: str) -> Optional[str]:
    t = (text or "").lower().strip()

    # –ì–µ–π—Ç: –±–µ–∑ —Å–ª–æ–≤–∞ "—Ç–µ–ª–µ–º–æ—Å—Ç" –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º
    if "—Ç–µ–ª–µ–º–æ—Å—Ç" not in t:
        return None

    # —Å–ø–∏—Å–æ–∫
    if re.search(r"\b(—Å–ø–∏—Å–æ–∫|–º–æ–∏|–ø–æ–∫–∞–∂–∏)\s+–≤—Å—Ç—Ä–µ—á", t):
        items = tm.list_meetings()
        return _fmt(items, tm.tz)

    # —É–¥–∞–ª–∏—Ç—å –ø–æ ID
    m = re.search(r"(–æ—Ç–º–µ–Ω–∏|—É–¥–∞–ª–∏)\s+–≤—Å—Ç—Ä–µ—á[–∞—É—ã–µ]?\s+([A-Za-z0-9_-]+)", t)
    if m:
        mid = m.group(2)
        tm.delete_meeting(mid)
        return f"üóëÔ∏è –í—Å—Ç—Ä–µ—á–∞ **{mid}** —É–¥–∞–ª–µ–Ω–∞ (–¢–µ–ª–µ–º–æ—Å—Ç)."

    # —Å–æ–∑–¥–∞—Ç—å
    if re.search(r"\b(—Å–æ–∑–¥–∞–π|—Å–æ–∑–¥–∞—Ç—å|—Å–¥–µ–ª–∞–π|–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π)\b.*\b–≤—Å—Ç—Ä–µ—á[–∞—É—ã–µ]?\b", t):
        when = _parse_when(text, tm.tz)
        title = "–í—Å—Ç—Ä–µ—á–∞"
        if not when:
            return "–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É/–≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: ¬´—Å–æ–∑–¥–∞–π –≤—Å—Ç—Ä–µ—á—É –≤ —Ç–µ–ª–µ–º–æ—Å—Ç–µ —Å–µ–≥–æ–¥–Ω—è –≤ 15 45¬ª."
        data = tm.create_meeting(title, when, 60)
        join = data.get("join_url") or data.get("link") or data.get("url") or "‚Äî"
        mid  = data.get("id") or data.get("meeting_id") or "‚Äî"
        when_str = when.strftime("%d.%m.%Y %H:%M")
        return (
            f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ ¬´{title}¬ª –Ω–∞ {when_str}.<br>"
            f"üîó <a href=\"{join}\" target=\"_blank\" rel=\"noopener\">–ü–µ—Ä–µ–π—Ç–∏ –≤ –¢–µ–ª–µ–º–æ—Å—Ç</a><br>"
            f"ID: {mid}"
        )

    return None
